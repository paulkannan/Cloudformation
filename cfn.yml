Parameters:
  BucketNamePrefix:
    Type: String
    Description: Prefix for the S3 bucket name

Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-kycupdate


  S3EventLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3EventLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${MyBucket}/*'

  S3EventLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3EventLambda
      Runtime: python3.8
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt S3EventLambdaRole.Arn
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              # Extract relevant information from the S3 event
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']

              # Create the input for the Step Function
              input_data = {
                  'bucket': bucket,
                  'key': key
              }

              return {
                  'statusCode': 200,
                  'body': json.dumps(input_data)
              }

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  ExtractAadharPhoneStep:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: ExtractAadharPhoneStep
      DefinitionString:
        !Sub |
          {
            "Comment": "Extract Aadhar and Phone Number from PDF",
            "StartAt": "ProcessPDF",
            "States": {
              "ProcessPDF": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                "Parameters": {
                  "FunctionName": "TextractLambda",
                  "Payload.$": "$",
                  "Qualifier": "LATEST"
                },
                "ResultPath": "$.textractOutput",
                "Next": "ExtractAadharPhone"
              },
              "ExtractAadharPhone": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                "Parameters": {
                  "FunctionName": "ExtractAadharPhoneLambda",
                  "Payload.$": "$",
                  "Qualifier": "LATEST"
                },
                "ResultPath": "$.extractedData",
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn

  TextractLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TextractLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:StartDocumentTextDetection
                Resource: '*'

  TextractLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextractLambda
      Runtime: python3.8
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt TextractLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              # Extract bucket and key information from the input event
              bucket = event['bucket']
              key = event['key']

              # Start document text detection with Amazon Textract
              textract = boto3.client('textract')
              response = textract.start_document_text_detection(
                  DocumentLocation={
                      'S3Object': {
                          'Bucket': bucket,
                          'Name': key
                      }
                  }
              )

              # Return the Textract JobId
              job_id = response['JobId']
              return {
                  'statusCode': 200,
                  'body': job_id
              }

  ExtractAadharPhoneLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExtractAadharPhoneLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:GetDocumentTextDetection
                Resource: '*'

  ExtractAadharPhoneLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ExtractAadharPhoneLambda
      Runtime: python3.8
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt ExtractAadharPhoneLambdaRole.Arn
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              # Extract the Textract JobId from the input event
              job_id = event['textractJobId']

              # Retrieve the Textract job results
              textract = boto3.client('textract')
              response = textract.get_document_text_detection(
                  JobId=job_id
              )

              # Extract Aadhar number and phone number from the Textract response
              aadhar_number = ''
              phone_number = ''
              # TODO: Extract Aadhar number and phone number from response

              # Prepare the extracted data
              extracted_data = {
                  'aadharNumber': aadhar_number,
                  'phoneNumber': phone_number
              }

              return {
                  'statusCode': 200,
                  'body': json.dumps(extracted_data)
              }
